C:\dev\formations\cloud\cats-app-infrastructure\terraform\modules\ec2-apps\variables.tf
variable "environment" {
  description = "Environnement (dev, iua, eua, qa, prod)"
  type        = string
}

variable "instance_type" {
  description = "Type d'instance EC2"
  type        = string
}

variable "ami_id" {
  description = "ID de l'AMI √† utiliser"
  type        = string
  default     = "ami-002090e223e4263bb"  # Amazon Linux 2 dans eu-west-3 (Paris)
}

variable "subnet_id" {
  description = "ID du subnet"
  type        = string
}

variable "vpc_id" {
  description = "ID du VPC"
  type        = string
}

variable "app_environment_variables" {
  description = "Variables d'environnement pour les applications"
  type        = map(string)
}

variable "security_group_rules" {
  description = "R√®gles pour le groupe de s√©curit√©"
  type = object({
    internal_only       = bool
    allowed_cidr_blocks = list(string)
  })
}

variable "tags" {
  description = "Tags additionnels pour les ressources"
  type        = map(string)
  default     = {}
}

variable "key_name" {
  description = "Nom de la cl√© SSH pour l'acc√®s √† l'instance"
  type        = string
}

variable "java_version" {
  description = "Version de Java √† installer"
  type        = string
  default     = "17"
}

variable "maven_version" {
  description = "Version de Maven √† installer"
  type        = string
  default     = "3.9.6"
}
C:\dev\formations\cloud\cats-app-infrastructure\terraform\modules\ec2-apps\outputs.tf
output "instance_id" {
  description = "ID de l'instance EC2"
  value       = aws_instance.app_instance.id
}

output "private_ip" {
  description = "IP priv√©e de l'instance"
  value       = aws_instance.app_instance.private_ip
}

output "security_group_id" {
  description = "ID du groupe de s√©curit√©"
  value       = aws_security_group.app_sg.id
}
C:\dev\formations\cloud\cats-app-infrastructure\terraform\modules\ec2-apps\main.tf :
# Cr√©ation de l'instance EC2
resource "aws_instance" "app_instance" {
  instance_type = var.instance_type
  ami           = var.ami_id  # Amazon Linux 2 AMI, √† adapter selon votre r√©gion
  subnet_id     = var.subnet_id
  key_name      = var.key_name  # ‚úÖ Ajout de la cl√© SSH

  # ‚úÖ Activation de l'acc√®s public pour SSH
  associate_public_ip_address = true

  # User data script pour configurer les variables d'environnement
  user_data = templatefile("${path.module}/templates/user_data.sh.tpl", {
    env_vars = var.app_environment_variables
    java_version = var.java_version
    maven_version = var.maven_version
  })

  # Tags
  tags = merge(
    var.tags,
    {
      Name        = "${var.environment}-instance"
      Environment = var.environment
    }
  )

  vpc_security_group_ids = [aws_security_group.app_sg.id]
}

# Groupe de s√©curit√©
resource "aws_security_group" "app_sg" {
  name        = "${var.environment}-app-sg"
  description = "Security group for application instance"
  vpc_id      = var.vpc_id

  # üîπ R√®gles entrantes dynamiques pour le trafic interne
  dynamic "ingress" {
    for_each = var.security_group_rules.internal_only ? var.security_group_rules.allowed_cidr_blocks : []
    content {
      from_port   = 0
      to_port     = 0
      protocol    = "-1"
      cidr_blocks = [ingress.value]
    }
  }

  # üîπ R√®gle statique pour SSH (port 22)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # ‚ö†Ô∏è Ouvre l'acc√®s SSH √† tout le monde ! √Ä restreindre.
  }

  # üîπ R√®gle sortante (sortie vers tous les r√©seaux autoris√©s)
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    #cidr_blocks = var.security_group_rules.allowed_cidr_blocks
  }

  tags = {
    Name        = "${var.environment}-app-sg"
    Environment = var.environment
  }
}
C:\dev\formations\cloud\cats-app-infrastructure\terraform\modules\ec2-apps\templates\user_data.sh.tpl :
#!/bin/bash

# Mettre √† jour les paquets du syst√®me
yum update -y

# Installation de Java
amazon-linux-extras enable corretto${java_version}
yum install -y java-${java_version}-amazon-corretto-devel

# V√©rifier l'installation de Java
java -version >> /var/log/java_install.log

# D√©finir JAVA_HOME et mettre √† jour PATH
echo "export JAVA_HOME=/usr/lib/jvm/java-${java_version}-amazon-corretto.x86_64" >> /etc/profile
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile
source /etc/profile

# Installation de Maven
maven_version="${maven_version}"
MAVEN_URL="https://dlcdn.apache.org/maven/maven-3/${maven_version}/binaries/apache-maven-${maven_version}-bin.tar.gz"

# T√©l√©charger et installer Maven
yum install -y wget tar
cd /opt
wget $MAVEN_URL -O apache-maven-${maven_version}-bin.tar.gz
tar -xvzf apache-maven-${maven_version}-bin.tar.gz
ln -s /opt/apache-maven-${maven_version} /opt/maven

# D√©finir M2_HOME et mettre √† jour PATH
echo 'export M2_HOME=/opt/maven' >> /etc/profile
echo 'export PATH=$M2_HOME/bin:$PATH' >> /etc/profile
source /etc/profile

# V√©rifier l'installation de Maven
mvn -version >> /var/log/maven_install.log

# Configuration des variables d'environnement
cat << EOF > /etc/environment
%{ for key, value in env_vars ~}
${key}=${value}
%{ endfor ~}
EOF

# Appliquer les permissions
chmod 644 /etc/environment
C:\dev\formations\cloud\cats-app-infrastructure\terraform\environments\dev\backend.tf :
terraform {
  backend "local" {}
}

C:\dev\formations\cloud\cats-app-infrastructure\terraform\environments\dev\dev.tfvars :

# R√©gion
aws_region = "eu-west-3"  # Paris

# Configuration r√©seau
vpc_id    = "vpc-28446c41"    # aws ec2 describe-vpcs
subnet_id = "subnet-355e095c" # √Ä remplacer par votre Subnet ID

# Configuration instance
instance_type = "t2.micro"

# Configuration s√©curit√©
internal_cidr_blocks = ["172.31.0.0/20"]  # aws ec2 describe-subnets

# D√©sactive la base de donn√©es pour le test
database_enabled = false

# Ajoutez ces lignes √† votre dev.tfvars
db_name     = "dummy"
db_user     = "dummy"
db_password = "dummy"

# Configuration minimale des sch√©mas
active_schema    = "schema1"
rollback_schema  = "schema1"
schema_1_name    = "schema1"
schema_2_name    = "schema2"
schema_3_name    = "schema3"
schema_4_name    = "schema4"

key_name = "mon_ssh_key"

maven_version = "3.9.9"
java_version = "17"
C:\dev\formations\cloud\cats-app-infrastructure\terraform\environments\dev\main.tf :

# D√©finition du provider AWS
provider "aws" {
  region = var.aws_region
}

# Module pour l'instance EC2 priv√©e
module "private_ec2_instance" {
  source = "../../modules/ec2-apps"

  environment   = "dev"
  instance_type = var.instance_type

  # Configuration r√©seau priv√©e
  vpc_id        = var.vpc_id
  subnet_id     = var.subnet_id
  key_name      = var.key_name
  maven_version = var.maven_version  # ‚úÖ Ajout de la variable Maven
  java_version  = var.java_version

  # Variables d'environnement pour les applications
  app_environment_variables = merge(
    {
      # Variables communes
      ENVIRONMENT = "dev"
      MAVEN_VERSION = var.maven_version  # ‚úÖ Ajout de MAVEN_VERSION
      JAVA_VERSION = var.java_version

      # Ports des services
      AUTH_SERVICE_PORT = "3000"
      API_SERVICE_PORT  = "3001"

      # Configuration multi-sch√©mas
      ACTIVE_SCHEMA    = var.active_schema      # Sch√©ma actuellement utilis√©
      ROLLBACK_SCHEMA  = var.rollback_schema    # Sch√©ma de rollback si besoin

      # Liste des sch√©mas disponibles
      SCHEMA_1         = var.schema_1_name
      SCHEMA_2         = var.schema_2_name
      SCHEMA_3         = var.schema_3_name
      SCHEMA_4         = var.schema_4_name
    },
      var.database_enabled ? {
      # Configuration de la base de donn√©es
      DB_HOST     = var.db_host
      DB_PORT     = var.db_port
      DB_NAME     = var.db_name
      DB_USER     = var.db_user
      DB_PASSWORD = var.db_password
    } : {}
  )

  # Configuration de s√©curit√©
  security_group_rules = {
    internal_only = true
    allowed_cidr_blocks = var.internal_cidr_blocks
  }

  # Tags
  tags = merge(
    var.project_tags,
    {
      Environment  = "dev"
      ActiveSchema = var.active_schema
    }
  )
}
C:\dev\formations\cloud\cats-app-infrastructure\terraform\environments\dev\variables.tf :
# Variables r√©gion AWS
variable "aws_region" {
  description = "R√©gion AWS pour le d√©ploiement"
  type        = string
  default     = "eu-west-3"  # Paris
}

# Variables r√©seau
variable "vpc_id" {
  description = "ID du VPC"
  type        = string
}

variable "subnet_id" {
  description = "ID du subnet"
  type        = string
}

variable "internal_cidr_blocks" {
  description = "Liste des CIDR blocks autoris√©s"
  type        = list(string)
}

# Variables instance EC2
variable "instance_type" {
  description = "Type d'instance EC2"
  type        = string
  default     = "t2.micro"  # √Ä ajuster selon les besoins
}

# Variables base de donn√©es
variable "database_enabled" {
  description = "Active ou d√©sactive la configuration de la base de donn√©es"
  type        = bool
  default     = true
}

variable "db_host" {
  description = "H√¥te de la base de donn√©es"
  type        = string
  default     = "localhost"
}

variable "db_port" {
  description = "Port de la base de donn√©es"
  type        = string
  default     = "1521"
}

variable "db_name" {
  description = "Nom de la base de donn√©es"
  type        = string
}

variable "db_user" {
  description = "Utilisateur de la base de donn√©es"
  type        = string
}

variable "db_password" {
  description = "Mot de passe de la base de donn√©es"
  type        = string
  sensitive   = true
}

# Variables sch√©mas
variable "active_schema" {
  description = "Sch√©ma actuellement utilis√© par les applications"
  type        = string
}

variable "rollback_schema" {
  description = "Sch√©ma de rollback en cas de probl√®me"
  type        = string
}

variable "schema_1_name" {
  description = "Nom du premier sch√©ma"
  type        = string
  default     = "cats_schema_1"
}

variable "schema_2_name" {
  description = "Nom du deuxi√®me sch√©ma"
  type        = string
  default     = "cats_schema_2"
}

variable "schema_3_name" {
  description = "Nom du troisi√®me sch√©ma"
  type        = string
  default     = "cats_schema_3"
}

variable "schema_4_name" {
  description = "Nom du quatri√®me sch√©ma"
  type        = string
  default     = "cats_schema_4"
}

# Tags communs
variable "project_tags" {
  description = "Tags communs pour toutes les ressources"
  type        = map(string)
  default     = {
    Project     = "cats"
    ManagedBy   = "terraform"
    Internal    = "true"
  }
}

variable "key_name" {
  description = "Nom de la cl√© SSH pour l'acc√®s √† l'instance"
  type        = string
}

variable "java_version" {
  description = "Version de Java √† installer"
  type        = string
  default     = "17"
}

variable "maven_version" {
  description = "Version de Maven √† installer"
  type        = string
  default     = "3.9.9"
}

